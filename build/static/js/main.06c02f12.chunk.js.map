{"version":3,"sources":["layout/Header.js","library/Audio.js","library/Frame.js","library/Queue.js","element/Element.js","element/Snake.js","element/Fruit.js","layout/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","role","aria-label","Audio","sounds","this","audioContext","AudioContext","window","webkitAudioContext","resume","key","loadItem","name","request","XMLHttpRequest","open","url","responseType","onload","getContext","decodeAudioData","response","newBuffer","buffer","send","sound","volume","source","createBufferSource","gainNode","createGain","gain","value","connect","destination","start","Frame","boardDims","elements","dims","setPixels","pixels","elem","concat","getPixels","index","y","Math","floor","x","coord","coords","push","Queue","maxLength","items","length","size","isEmpty","item","shift","Element","color","Snake","dirs","U","code","vector","D","L","R","dirKeys","87","38","83","40","65","37","68","39","invDirs","headColor","body","newSegment","dirKey","hasOwnProperty","head","dir","pos","i","headMeets","dist","max","a","nextCoord","updatePosition","updateDirections","seg","tail","pixel","Fruit","position","padding","scoreValue","xDiv","yDiv","randBetween","min","random","isPlaced","Board","props","inPlay","framesPerSecond","calcDimensions","width","height","scale","canvas","React","createRef","keyQueue","enqueue","audio","xMax","yMax","Error","addEventListener","e","keyCode","hadFirstInteraction","handleFirstInteraction","loadAll","setInPlay","bindKeydowns","snake","fruit","place","animate","isNotEmpty","directByKey","dequeue","move","grow","play","addToScore","headMeetsBody","stop","clearTimeout","timerId","ctx","frame","clearRect","fillStyle","fillRect","setTimeout","animateId","requestAnimationFrame","draw","current","ref","Component","App","state","score","setState","bottomText","className","bind","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06c02f12.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <header>\n            <h1><span role=\"img\" aria-label=\"snake emoji\">üêç</span> Snake!</h1>\n        </header>\n    );\n}\n\nexport default Header;\n","class Audio {\n\n    sounds = {\n        'blip': {\n            'url': '/static/audio/blip.mp3',\n            'volume': 0.05\n        },\n        'fail': {\n            'url': '/static/audio/fail.mp3',\n            'volume': 0.05\n        }\n    }\n\n    /**\n     * Get the AudioContext. Assuming this would be called when it's time to play.\n     */\n    getContext() {\n        if (!this.audioContext) {\n            let AudioContext = window.AudioContext || window.webkitAudioContext;\n            this.audioContext = new AudioContext();\n            this.audioContext.resume();\n        }\n\n        return this.audioContext;\n    }\n\n    /**\n     * Load all sounds.\n     */\n    loadAll() {\n        for (let key in this.sounds) this.loadItem(key);\n\n        return this;\n    }\n\n    /**\n     * Load a sound by its name.\n     */\n    loadItem(name) {\n        let request = new XMLHttpRequest();\n        request.open('GET', this.sounds[name].url, true);\n        request.responseType = 'arraybuffer';\n\n        request.onload = () => {\n            this.getContext().decodeAudioData(request.response, (newBuffer) => {\n                this.sounds[name].buffer = newBuffer;\n            });\n        }\n\n        request.send();\n    }\n\n    /**\n     * Play a sound by its name.\n     */\n    play(name) {\n        let sound = this.sounds[name];\n        let volume = this.sounds[name].volume || 0.5;\n\n        if (sound.buffer) {\n            let source = this.getContext().createBufferSource();\n            source.buffer = sound.buffer;\n\n            let gainNode = this.getContext().createGain();\n            gainNode.gain.value = volume;\n\n            gainNode.connect(this.getContext().destination);\n            source.connect(gainNode);\n            source.start();\n        }\n\n        return this;\n    }\n\n}\n\nexport default Audio;\n","class Frame {\n\n    /**\n     * Constructor.\n     */\n    constructor(boardDims, elements = []) {\n        this.dims = boardDims;\n        this.setPixels(elements);\n    }\n\n    /**\n     * List all the pixels of given elements.\n     */\n    setPixels(elements) {\n        this.pixels = [];\n\n        for (let elem of elements) {\n            this.pixels = this.pixels.concat(elem.getPixels());\n        }\n\n        return this.pixels;\n    }\n\n    /**\n     * Convert coordinate index into a coordinate pair.\n     */\n    indexToCoord(index) {\n        let y = Math.floor(index / this.dims.x);\n        let x = index - (this.dims.x * y);\n\n        return [x, y];\n    }\n\n    /**\n     * Convert a coordinate pair into a coordinate index.\n     */\n    coordToIndex(coord) {\n        return coord[0] + (this.dims.x * coord[1]);\n    }\n\n    /**\n     * Get all game board coordinates.\n     */\n    getAllCoords() {\n        let coords = [];\n\n        for (let y = 0; y < this.dims.y; y++) {\n            for (let x = 0; x < this.dims.x; x++) {\n                coords.push([x, y]);\n            }\n        }\n\n        return coords;\n    }\n\n}\n\nexport default Frame;\n","class Queue {\n\n    /**\n     * Constructor.\n     */\n    constructor(maxLength) {\n        this.maxLength = maxLength;\n        this.items = [];\n    }\n\n    /**\n     * Get the size of the queue.\n     */\n    size() {\n        return this.items.length;\n    }\n\n    /**\n     * Whether the queue is empty.\n     */\n    isEmpty() {\n        return this.size() === 0;\n    }\n\n    /**\n     * Whether the queue is not empty.\n     */\n    isNotEmpty() {\n        return !this.isEmpty();\n    }\n\n    /**\n     * Enqueue an item. Return true if added, false if not.\n     */\n    enqueue(item) {\n        if (this.size() === this.maxLength) return false;\n        return this.items.push(item) > 0;\n    }\n\n    /**\n     * Dequeue the upcoming item and return it.\n     */\n    dequeue() {\n        return this.items.shift();\n    }\n\n}\n\nexport default Queue;\n","class Element {\n\n    constructor(boardDims) {\n        this.dims = boardDims;\n    }\n\n    pixel(x, y, color) {\n        return { coord:[x, y], color:color };\n    }\n\n}\n\nexport default Element;\n","import Element from './Element';\n\nclass Snake extends Element {\n\n    dirs = {\n        U: { code: 'U', vector: {x:0, y:-1} },\n        D: { code: 'D', vector: {x:0, y:1}  },\n        L: { code: 'L', vector: {x:-1, y:0} },\n        R: { code: 'R', vector: {x:1, y:0}  }\n    };\n\n    dirKeys = {\n        87: 'U', 38: 'U',\n        83: 'D', 40: 'D',\n        65: 'L', 37: 'L',\n        68: 'R', 39: 'R'\n    };\n\n    invDirs = {\n        U: 'D',\n        D: 'U',\n        L: 'R',\n        R: 'L'\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor(boardDims) {\n        super(boardDims);\n        this.color = 'rgb(30, 200, 11)';\n        this.headColor = 'rgb(25, 245, 25)';\n        this.body = [this.newSegment()];\n    }\n\n    /**\n     * Get the first segment.\n     */\n    head() {\n        return this.body[0];\n    }\n\n    /**\n     * Get the last segment.\n     */\n    tail() {\n        return this.body[this.body.length - 1];\n    }\n\n    /**\n     * Direct the snake's head by a given keyCode.\n     */\n    directByKey(dirKey) {\n        if (!this.dirKeys.hasOwnProperty(dirKey)) return;\n        if (this.head().dir.code === this.invDirs[this.dirKeys[dirKey]]) return;\n        this.head().dir = this.dirs[this.dirKeys[dirKey]];\n    }\n\n    /**\n     * Whether the snake's head has met a given position.\n     */\n    headMeets(pos) {\n        return this.head().pos.x === pos.x && this.head().pos.y === pos.y;\n    }\n\n    /**\n     * Whether the snake's head meets any other segment.\n     */\n    headMeetsBody() {\n        for (let i = 1; i < this.body.length; i++) {\n            if (this.headMeets(this.body[i].pos)) return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Calculate one move's coordinate value, given the distance and axis maximum.\n     */\n    nextCoord(coord, dist, max) {\n        coord += dist;\n\n        if (coord === max) {\n            coord = 0;\n        } else if (coord < 0) {\n            coord = max - 1;\n        }\n\n        return coord;\n    }\n\n    /**\n     * Move the snake forward across the board.\n     */\n    updatePosition() {\n        for (let i = 0; i < this.body.length; i++) {\n            for (let a of ['x', 'y']) {\n                this.body[i].pos.[a] = this.nextCoord(\n                    this.body[i].pos.[a],\n                    this.body[i].dir.vector.[a],\n                    this.dims.[a]\n                );\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Shift the direction of all snake segments.\n     */\n    updateDirections() {\n        for (let i = this.body.length - 1; i > 0; i--) {\n            this.body[i].dir = this.body[i - 1].dir;\n        }\n\n        return this;\n    }\n\n    /**\n     * Move all segments one step across the board.\n     */\n    move() {\n        this.updatePosition().updateDirections();\n    }\n\n    /**\n     * Create and return a new snake segment with default values.\n     */\n    newSegment() {\n        return {\n            pos: {x:-1, y:0},\n            dir: this.dirs['R']\n        };\n    }\n\n    /**\n     * Add a new segment to the tail.\n     */\n    grow() {\n        let seg = this.newSegment();\n\n        // Same direction.\n        seg.dir = this.tail().dir;\n\n        // One tick behind the tail.\n        seg.pos.x = this.nextCoord(this.tail().pos.x, seg.dir.vector.x * -1, this.dims.x);\n        seg.pos.y = this.nextCoord(this.tail().pos.y, seg.dir.vector.y * -1, this.dims.y);\n\n        this.body.push(seg);\n    }\n\n    /**\n     * Get all the pixels to output for the board.\n     */\n    getPixels() {\n        let pixels = [];\n\n        for (let i = 0; i < this.body.length; i++) {\n            let color = i === 0 ? this.headColor : this.color;\n            pixels.push(this.pixel(this.body[i].pos.x, this.body[i].pos.y, color));\n        }\n\n        return pixels;\n    }\n}\n\nexport default Snake;\n","import Element from './Element';\n\nclass Fruit extends Element {\n\n    /**\n     * Constructor.\n     */\n    constructor(boardDims) {\n        super(boardDims);\n        this.position = null;\n        this.padding = 1;\n        this.scoreValue = 10;\n        this.color = 'rgb(237, 14, 86)';\n    }\n\n    /**\n     * Whether the fruit has been placed on the board.\n     */\n    isPlaced() {\n        return this.position !== null;\n    }\n\n    /**\n     * Find some coordinates for the fruit.\n     */\n    place() {\n        if (this.position === null) this.position = {};\n        let xDiv = Math.floor(this.dims.x) - 1;\n        let yDiv = Math.floor(this.dims.y) - 1;\n        this.position.x = this.randBetween(this.padding, xDiv - this.padding);\n        this.position.y = this.randBetween(this.padding, yDiv - this.padding);\n    }\n\n    /**\n     * Take the fruit off the board.\n     */\n    take() {\n        this.position = null;\n    }\n\n    /**\n     * Calculate some random value between two limits.\n     */\n    randBetween(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /**\n     * Get all the pixels to output for the board.\n     */\n    getPixels() {\n        if (!this.isPlaced()) return [];\n        return this.pixel(this.position.x, this.position.y, this.color);\n    }\n}\n\nexport default Fruit;\n","import React, { Component } from 'react';\nimport Audio from '../library/Audio';\nimport Frame from '../library/Frame';\nimport Queue from '../library/Queue';\nimport Snake from '../element/Snake';\nimport Fruit from '../element/Fruit';\n\nclass Board extends Component {\n\n    inPlay = false;\n    framesPerSecond = 10;\n\n    /**\n     * Constructor.\n     */\n    constructor(props) {\n        super(props);\n\n        this.dims = this.calcDimensions(props.width, props.height, props.scale);\n\n        this.canvas = React.createRef();\n\n        this.keyQueue = new Queue(2);\n        this.keyQueue.enqueue(39);\n\n        this.audio = new Audio();\n    }\n\n    /**\n     * Calculate board dimension values.\n     */\n    calcDimensions(width, height, scale) {\n        let xMax = width / scale;\n        let yMax = height / scale;\n\n        if (xMax % 1 !== 0 || yMax % 1 !== 0) {\n            throw new Error('Bad scale');\n        }\n\n        return {x:xMax, y:yMax};\n    }\n\n    /**\n     * Bind user keydowns.\n     */\n    bindKeydowns() {\n        return window.addEventListener('keydown', e => {\n            this.keyQueue.enqueue(e.keyCode);\n            if (!this.hadFirstInteraction) this.handleFirstInteraction();\n        });\n    }\n\n    /**\n     * Handle the first user interaction.\n     */\n    handleFirstInteraction() {\n        this.audio.loadAll();\n        this.hadFirstInteraction = true;\n    }\n\n    /**\n     * Set whether this game is in play.\n     */\n    setInPlay(inPlay) {\n        this.inPlay = inPlay;\n        this.props.setInPlay(inPlay);\n    }\n\n    /**\n     * Begin animation.\n     */\n    componentDidMount() {\n        this.bindKeydowns();\n        this.start();\n    }\n\n    /**\n     * Start the game.\n     */\n    start() {\n        this.setInPlay(true);\n        this.snake = new Snake(this.dims);\n        this.fruit = new Fruit(this.dims);\n        this.fruit.place();\n        this.animate();\n    }\n\n    /**\n     * Move the game forward.\n     */\n    play() {\n        // Direct the snake.\n        if (this.keyQueue.isNotEmpty()) {\n            this.snake.directByKey(this.keyQueue.dequeue());\n        }\n\n        // Move the snake.\n        this.snake.move();\n\n        // He ate a fruit!\n        if (this.snake.headMeets(this.fruit.position)) {\n            this.snake.grow();\n            this.fruit.place();\n            this.audio.play('blip');\n            this.props.addToScore(this.fruit.scoreValue);\n        }\n\n        // He ate himself!\n        if (this.snake.headMeetsBody()) {\n            this.stop();\n            this.audio.play('fail');\n        }\n\n        // List all elements in the frame.\n        let elements = [\n            this.fruit,\n            this.snake\n        ];\n\n        return new Frame(this.dims, elements);\n    }\n\n    /**\n     * Stop the game.\n     */\n    stop() {\n        this.setInPlay(false);\n        clearTimeout(this.timerId);\n    }\n\n    /**\n     * Draw a new frame of pixels onto the canvas.\n     */\n    draw(canvas, ctx, frame) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        for (let i = frame.pixels.length - 1; i > -1; i--) {\n            ctx.fillStyle = frame.pixels[i].color;\n            ctx.fillRect(\n                frame.pixels[i].coord[0] * this.props.scale,\n                frame.pixels[i].coord[1] * this.props.scale,\n                this.props.scale,\n                this.props.scale\n            );\n        }\n    }\n\n    /**\n     * Animate frames recursively.\n     */\n    animate() {\n        if (!this.inPlay) return;\n\n        this.timerId = setTimeout(() => {\n            this.animateId = requestAnimationFrame(() => this.animate());\n\n            this.draw(\n                this.canvas.current,\n                this.canvas.current.getContext('2d'),\n                this.play()\n            );\n\n        }, 1000 / this.framesPerSecond);\n    }\n\n    render() {\n        return(\n            <canvas\n                ref={this.canvas}\n                width={this.props.width}\n                height={this.props.height}>\n            </canvas>\n        );\n    };\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Header from './layout/Header';\nimport Board from './layout/Board';\n\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n        inPlay: false,\n        score: 0\n    }\n\n    setInPlay(inPlay) {\n        this.setState({inPlay: inPlay});\n    }\n\n    addToScore(value) {\n        this.setState({score: this.state.score + value});\n    }\n\n    render() {\n        let gameInstText = 'Play on! Use arrow or WASD keys.';\n        let gameOverText = 'Game over! Refresh to play again.';\n        let isGameOver = this.state.inPlay === false && this.state.score > 0;\n        let bottomText = isGameOver ? gameOverText : gameInstText;\n\n        return(\n            <div className=\"container\">\n                <Header />\n\n                <Board\n                    width={800}\n                    height={450}\n                    scale={25}\n                    setInPlay={this.setInPlay.bind(this)}\n                    addToScore={this.addToScore.bind(this)} />\n\n                <h2>Score: {this.state.score}</h2>\n                <h3>{bottomText}</h3>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}